install_from_swirl("R Programming")
library("swirl")
install_from_swirl("R Programming")
install_from_swirl("R Programming")
swirl
swirl()
5+7
x <- 5+7
x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
C( z, 555, z)
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x <-9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info(mytest.R)
file.info("mytest.R")
file.info("mystest.R"$mode)
file.info("mystest.R")$mode
file.rename("mytest.R", "mytest2.R"")
file.rename("mytest.R", "mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest.R", "mytest3.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir3"))
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
getwd()
setwd(old.dir)
1:20
pi:10
15:1
':'
?':'
seq(1, 20)
seq(0,10, by = 0.5)
seq(5,10, length=30)
my_seq <- seq(5,10, length =30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect <1
tf
num_vect >=6
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Marc")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep =" ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z<- (NA, 1000)
z<-rep(NA, 1000)
my_data <- sample( c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(False, False, True, False, True, False, TRUE)]
x[c(FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE)]
x[c(3,5,7)]
x[0]
x[300000]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar =2, norf = NA)
vect
vect(names())
vect.names()
names(vect)
vect2 <- c(11, 2, NA)
names(vect2 <- C("foo", "bar", "norf"))
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
swirl()
swirl()
library(swirl)
rm(list=ls())
swirl()
submit(0)
submit()
evaluate(sum,c(2,4,6))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){})
help
info()
nxt()
evaluate( function(x){})
evaluate( function(x){y<- c(8,4,0)})
evaluate( function(x){y<-c(8,4,0) y(1)})
play()
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]}, c(8,4,0))
nxt()
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
telegram("This is foolishness!")
submit()
submit()
mad_libs(place = "Boston", adjective = "warm", noun = "dog")
play(0)
play()
paste("one", "two")
nxt
nxt()
submit()
"I" %p% "love" %p% "R!"
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<- asPOSIXlt(Sys.time())
t2<- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
w33kdays(t1)
weekdays(t1)
weekdays(d1)
months(t1)
quarters(t2)
t3<- "October 17, 1986 08:24"
strptime(t3, "%B, %d, %Y %H:%M")
t4 <- strptime(t3, "%B, %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
head(flags)
dim(flags)
class(flags)
cls_list <-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[ , 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<- flags[ , 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
sapply(iris, mean)
tapply(iris$Sepal.Length, iris$Species, summary)
colMeans(iris)
apply(iris[,1:4],1,mean)
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
?apply
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
debug(ls)
?debug
ls
undebug(ls)
quit
exit
return
ls
?ls
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
clear
ls
ls()
library(Assignment3.R)
source(cachematrix.R)
getwd
getwd()
setwd(~/documents/cvs/training/data science training/DST_Uploads/ProgrammingAssignment2 )
setwd("~/documents/cvs/training/data science training/DST_Uploads/ProgrammingAssignment2"" )
l
quit
exit
lsdlfjas;ldkjf
exists()
set
;
/
asldkjf
quit
exit
lrr
asdlkfjas;dlkjfa;slkdjf
setwd()
1
2
3
4
5
a
setwd
quit
exists()
~/documents/cvs/training/data science training/DST_Uploads/ProgrammingAssignment2 ;
quit
exit
done
setwd(WD)
ls
quit
exit
ls?
?ls
help
quit
getwd()
setwd("~/documents/cvs/training/data science training/DST_Uploads/ProgrammingAssignment2")
getwd()
cd..
setwd(./CVS)
ls
dir
ls()
getwd()
dir()
?
setwd
setwd("~/CVS/Training/Data Science Training/DST_Uploads/ProgrammingAssignment2")
dir()
Source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
cacheSolve()
testmatrix <- matrix(1:12, nrow = 3, ncol=4)
testmatrix
solve(testmatrix)
testmatrix <- matrix(1:16, nrow = 4, ncol=4)
solve(testmatrix)
?solve
testmatrix
solve(testmatrix)
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol=2)
m1
solve(m1)
i2 <- matrix(c(1,0,0,1), nrow =2, ncol = 2)
i2
solve(m1)
makeCacheMatrix(m1)
source("cachematrix.R")
makeCacheMatrix(m1)
makeCacheMatrix(m1)
source("cachematrix.R")
makeCacheMatrix(m1)
source("cachematrix.R")
makeCacheMatrix(m1)
source("cachematrix.R")
makeCacheMatrix(m1)
m1
n1
solve(m1)
cacheSolve(m1)
solve(m1)
source("cachematrix.R")
source("cachematrix.R")
cacheSolve(m1)
m1$
getmean()
?m1
?vector
attributes(m1)
attrib(m1)
attributes(m1)
?m1
m1$dim
dim$m1
m1
makevector(c(0,1,4))
source("cachematrix.R")
makevector(c(0,1,4))
makeVector(m1)
makeVector(c(0,5,3,5,2,1))
cachemean(c(0,4,3,5,1))
cachmean(numeric(0,4,5,1))
?cachemean(numeric(0,4,5,1))
numeric(5)
numeric (0,4,3,2)
numeric(4,3,2,1)
numeric(3)
?numeric
makeVector(c(4,3, 2, 8))
makeVector(8)
x <- makeVector(8)
x
x <- makeVector(8)
cachemean(x)
x
x
x
x
cachemean(x)
source("cachematrix.R")
cachemean(x)
source("cachematrix.R")
x <- makeVector(8)
x$getmean()
x$get()
x
x <- makeVector(8, 3, 2, 1)
x <- makeVector(5)
x
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
source("cachematrix.R")
x <- makeVector(5)
cachemean(x)
?is.null
source("cachematrix.R")
cachemean(x)
source("cachematrix.R")
cachemean(x)
x
m1
source("cachematrix.R")
x <- makeCacheMatrix(m1)
x
cacheSolve(x)
x
cacheSolve(x)
m1
x
m1
cachemean(m1)
cacheSolve(m1)
m1
x <- makeCacheMatrix(m1)
x
cacheSolve(x)
m1
n1
n1 <- solve(m1)
n1
cacheSolve(n1)
cacheSolve(m1)
cacheSolve(x)
source("cachematrix.R")
x <- 0
x <- ""
cacheSolve(m1)
source("cachematrix.R")
x <- ""
cacheSolve(m1)
source("cachematrix.R")
cacheSolve(m1)
args(m1)
?numeric
z <- numeric(8, as.numeric(1:10))
z <- c(0, 4,5,6)
type(z)
type viewinfo()
viewinfo()
cachemean(c(4, 6, 3))
source("cachematrix.R")
cachemean(c(4, 6, 3))
n
n1
integervector <- c(3, 3, 6, 8)
integervector[3]
cachemean(integervector)
myMatrix_object <- makeCacheMatrix(m1)
cachesolve(myMatrix_object)
cacheSolve(myMatrix_object)
source("cachematrix.R")
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow=2, ncol=2)
myMatrix_object$set(n2)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
myMatrix_object
source("cachematrix.R")
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
source("cachematrix.R")
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
